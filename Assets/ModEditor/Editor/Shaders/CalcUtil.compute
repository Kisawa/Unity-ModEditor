#pragma kernel SelectWithScreenScope
#pragma kernel SpreadSelect
#pragma kernel RespreadSelect
#pragma kernel LockZone
#pragma kernel AddZone
#pragma kernel SubZone
#pragma kernel CalcWithSize
#pragma kernel CalcWithSpread
#pragma kernel MappedTo01
#pragma kernel Result1
#pragma kernel Result2
#pragma kernel Result3
#pragma kernel Result4
#pragma kernel Origin2To1
#pragma kernel Origin3To1
#pragma kernel Origin4To1
#pragma kernel Origin4To2
#pragma kernel Origin4To3
#pragma kernel Origin1To2
#pragma kernel Origin1To3
#pragma kernel Origin1To4
#pragma kernel Origin2To4
#pragma kernel Origin3To4

float4x4 _MV;
float4x4 _P;
float3 _MouseTexcoord;
float _Size;
float _Depth;
bool _ClearSpread;
int _OnlyZone;
int _ZoneInSelect;
StructuredBuffer<float3> _Vertices;
RWStructuredBuffer<float> RW_Selects;
RWStructuredBuffer<float> RW_Depths;
RWStructuredBuffer<float> RW_Sizes;
RWStructuredBuffer<int> RW_Zone;

[numthreads(1024, 1, 1)]
void SelectWithScreenScope(uint3 id : SV_DispatchThreadID)
{
	float3 viewPos = mul(_MV, float4(_Vertices[id.x], 1.0)).xyz;
	float depth = -viewPos.z;
	RW_Depths[id.x] = depth;
	float4 clipPos = mul(_P, float4(viewPos, 1.0));
	float2 screenPos = (clipPos.xy + clipPos.w) * 0.5;
	float2 uv = screenPos / clipPos.w;
	uv.x *= _MouseTexcoord.z;
	float2 mouseTexcoord = _MouseTexcoord.xy;
	mouseTexcoord.x *= _MouseTexcoord.z;
	float dis = distance(uv, mouseTexcoord);
	RW_Sizes[id.x] = dis;
	float res = (1 - step(_Size, dis)) * (1 - step(_Depth, depth));
	int isZone = RW_Zone[id.x];
	int zone = max(isZone, _OnlyZone);
	res *= zone;
	res = lerp(res, 1, isZone * _ZoneInSelect);
	if (_ClearSpread)
		RW_Selects[id.x] = -res;
	else if (RW_Selects[id.x] * zone <= 0)
		RW_Selects[id.x] = -res;
}

StructuredBuffer<int> _Triangles;
[numthreads(1024, 1, 1)]
void SpreadSelect(uint3 id: SV_DispatchThreadID)
{
	int layer = id.x / 3;
	int vertex_id0 = _Triangles[fmod(id.x, 3) + layer * 3];
	int vertex_id1 = _Triangles[fmod(id.x + 1, 3) + layer * 3];
	int vertex_id2 = _Triangles[fmod(id.x + 2, 3) + layer * 3];
	float select0 = RW_Selects[vertex_id0];
	float select1 = RW_Selects[vertex_id1];
	float select2 = RW_Selects[vertex_id2];

	float res = max(select0, select1);
	res = max(res, select2);
	res = max(res, 0) + 1;
	int write = any(float3(select0, select1, select2));
	if (write == 1)
	{
		RW_Selects[vertex_id0] = select0 + (1 - any(select0)) * res;
		RW_Selects[vertex_id1] = select1 + (1 - any(select1)) * res;
		RW_Selects[vertex_id2] = select2 + (1 - any(select2)) * res;
	}
}

int _SpreadLevel;
[numthreads(1024, 1, 1)]
void RespreadSelect(uint3 id: SV_DispatchThreadID)
{
	int layer = id.x / 3;
	int vertex_id0 = _Triangles[fmod(id.x, 3) + layer * 3];
	int vertex_id1 = _Triangles[fmod(id.x + 1, 3) + layer * 3];
	int vertex_id2 = _Triangles[fmod(id.x + 2, 3) + layer * 3];
	float select0 = RW_Selects[vertex_id0];
	float select1 = RW_Selects[vertex_id1];
	float select2 = RW_Selects[vertex_id2];
	RW_Selects[vertex_id0] = select0 * step(0, _SpreadLevel - select0);
	RW_Selects[vertex_id1] = select1 * step(0, _SpreadLevel - select1);
	RW_Selects[vertex_id2] = select2 * step(0, _SpreadLevel - select2);
}

[numthreads(1024, 1, 1)]
void LockZone(uint3 id: SV_DispatchThreadID)
{
	int res = any(RW_Selects[id.x]);
	RW_Zone[id.x] = res;
}

[numthreads(1024, 1, 1)]
void AddZone(uint3 id: SV_DispatchThreadID)
{
	int res = any(RW_Selects[id.x]);
	res = max(RW_Zone[id.x], res);
	RW_Zone[id.x] = res;
}

[numthreads(1024, 1, 1)]
void SubZone(uint3 id: SV_DispatchThreadID)
{
	int res = 1 - any(RW_Selects[id.x]);
	res = min(RW_Zone[id.x], res);
	RW_Zone[id.x] = res;
}

float remap(float num, float inMin, float inMax, float outMin, float outMax)
{
	return outMin + (num - inMin) * (outMax - outMin) / (inMax - inMin);
}

StructuredBuffer<float> _Origin1;
StructuredBuffer<float2> _Origin2;
StructuredBuffer<float3> _Origin3;
StructuredBuffer<float4> _Origin4;
RWStructuredBuffer<float> RW_Result1;
RWStructuredBuffer<float2> RW_Result2;
RWStructuredBuffer<float3> RW_Result3;
RWStructuredBuffer<float4> RW_Result4;

float4 _From;
float4 _To;
float _FromStep;
float _ToStep;
[numthreads(1024, 1, 1)]
void CalcWithSize(uint3 id: SV_DispatchThreadID)
{
	int select = any(RW_Selects[id.x]);
	float4 origin = lerp(0, _From, select);
	float res = RW_Sizes[id.x] / _Size * select;
	RW_Result4[id.x] = lerp(origin, _To, clamp(remap(res, _FromStep, _ToStep, 0, 1), 0, 1));
}

[numthreads(1024, 1, 1)]
void CalcWithSpread(uint3 id: SV_DispatchThreadID)
{
	float spread = RW_Selects[id.x];
	int select = any(spread);
	spread -= clamp(sign(spread), -1, 0);
	float4 origin = lerp(0, _From, select);
	float res = spread / _SpreadLevel * select;
	RW_Result4[id.x] = lerp(origin, _To, clamp(remap(res, _FromStep, _ToStep, 0, 1), 0, 1));
}

[numthreads(1024, 1, 1)]
void MappedTo01(uint3 id: SV_DispatchThreadID)
{
	float4 origin = RW_Result4[id.x];
	RW_Result4[id.x] = origin * .5 + .5;
}

int _WriteType;
bool _Clamp;
float _ClampMin;
float _ClampMax;
int _OriginPass;
[numthreads(1024, 1, 1)]
void Result1(uint3 id: SV_DispatchThreadID)
{
	int select = any(RW_Selects[id.x]);
	float pre = RW_Result1[id.x];
	float4 origin4 = _Origin4[id.x];
	float origin = 0;
	switch (_OriginPass)
	{
	case 1:
		origin = origin4.y;
		break;
	case 2:
		origin = origin4.z;
		break;
	case 3:
		origin = origin4.w;
		break;
	default:
		origin = origin4.x;
		break;
	}
	float res = 0;
	switch (_WriteType)
	{
	case 0:
		res = lerp(pre, origin, select);
		break;
	case 1:
		res = pre + origin * select;
		break;
	case 2:
		res = pre - origin * select;
		break;
	case 3:
		res = pre * origin;
		res = lerp(pre, res, select);
		break;
	}
	if (_Clamp)
		res = clamp(res, _ClampMin, _ClampMax);
	RW_Result1[id.x] = res;
}

[numthreads(1024, 1, 1)]
void Result2(uint3 id: SV_DispatchThreadID)
{
	int select = any(RW_Selects[id.x]);
	float2 pre = RW_Result2[id.x];
	float2 origin = _Origin4[id.x].xy;
	float2 res = 0;
	switch (_WriteType)
	{
	case 0:
		res = lerp(pre, origin, select);
		break;
	case 1:
		res = pre + origin * select;
		break;
	case 2:
		res = pre - origin * select;
		break;
	case 3:
		res = pre * origin;
		res = lerp(pre, res, select);
		break;
	}
	if (_Clamp)
		res = clamp(res, _ClampMin, _ClampMax);
	RW_Result2[id.x] = res;
}

[numthreads(1024, 1, 1)]
void Result3(uint3 id: SV_DispatchThreadID)
{
	int select = any(RW_Selects[id.x]);
	float3 pre = RW_Result3[id.x];
	float3 origin = _Origin4[id.x].xyz;
	float3 res = 0;
	switch (_WriteType)
	{
	case 0:
		res = lerp(pre, origin, select);
		break;
	case 1:
		res = pre + origin * select;
		break;
	case 2:
		res = pre - origin * select;
		break;
	case 3:
		res = pre * origin;
		res = lerp(pre, res, select);
		break;
	}
	if (_Clamp)
		res = clamp(res, _ClampMin, _ClampMax);
	RW_Result3[id.x] = res;
}

[numthreads(1024, 1, 1)]
void Result4(uint3 id: SV_DispatchThreadID)
{
	int select = any(RW_Selects[id.x]);
	float4 pre = RW_Result4[id.x];
	float4 origin = _Origin4[id.x];
	float4 res = 0;
	switch (_WriteType)
	{
	case 0:
		res = lerp(pre, origin, select);
		break;
	case 1:
		res = pre + origin * select;
		break;
	case 2:
		res = pre - origin * select;
		break;
	case 3:
		res = pre * origin;
		res = lerp(pre, res, select);
		break;
	}
	if (_Clamp)
		res = clamp(res, _ClampMin, _ClampMax);
	RW_Result4[id.x] = res;
}

[numthreads(1024, 1, 1)]
void Origin2To1(uint3 id: SV_DispatchThreadID)
{
	float2 origin = _Origin2[id.x];
	switch (_OriginPass)
	{
	case 1:
		RW_Result1[id.x] = origin.y;
		break;
	default:
		RW_Result1[id.x] = origin.x;
		break;
	}
}

[numthreads(1024, 1, 1)]
void Origin3To1(uint3 id: SV_DispatchThreadID)
{
	float3 origin = _Origin3[id.x];
	switch (_OriginPass)
	{
	case 1:
		RW_Result1[id.x] = origin.y;
		break;
	case 2:
		RW_Result1[id.x] = origin.z;
		break;
	default:
		RW_Result1[id.x] = origin.x;
		break;
	}
}

[numthreads(1024, 1, 1)]
void Origin4To1(uint3 id: SV_DispatchThreadID)
{
	float4 origin = _Origin4[id.x];
	switch (_OriginPass)
	{
	case 1:
		RW_Result1[id.x] = origin.y;
		break;
	case 2:
		RW_Result1[id.x] = origin.z;
		break;
	case 3:
		RW_Result1[id.x] = origin.w;
		break;
	default:
		RW_Result1[id.x] = origin.x;
		break;
	}
}

[numthreads(1024, 1, 1)]
void Origin4To2(uint3 id: SV_DispatchThreadID)
{
	float4 origin = _Origin4[id.x];
	RW_Result2[id.x] = origin.xy;
}

[numthreads(1024, 1, 1)]
void Origin4To3(uint3 id: SV_DispatchThreadID)
{
	float4 origin = _Origin4[id.x];
	RW_Result3[id.x] = origin.xyz;
}

int _ResultPass;
[numthreads(1024, 1, 1)]
void Origin1To2(uint3 id: SV_DispatchThreadID)
{
	float origin = _Origin1[id.x];
	switch (_ResultPass)
	{
	case 0:
		RW_Result2[id.x].x = origin;
		break;
	case 1:
		RW_Result2[id.x].y = origin;
		break;
	default:
		RW_Result2[id.x] = origin;
		break;
	}
}

[numthreads(1024, 1, 1)]
void Origin1To3(uint3 id: SV_DispatchThreadID)
{
	float origin = _Origin1[id.x];
	switch (_ResultPass)
	{
	case 0:
		RW_Result3[id.x].x = origin;
		break;
	case 1:
		RW_Result3[id.x].y = origin;
		break;
	case 2:
		RW_Result3[id.x].z = origin;
		break;
	default:
		RW_Result3[id.x] = origin;
		break;
	}
}

[numthreads(1024, 1, 1)]
void Origin1To4(uint3 id: SV_DispatchThreadID)
{
	float origin = _Origin1[id.x];
	switch (_ResultPass)
	{
	case 0:
		RW_Result4[id.x].x = origin;
		break;
	case 1:
		RW_Result4[id.x].y = origin;
		break;
	case 2:
		RW_Result4[id.x].z = origin;
		break;
	case 3:
		RW_Result4[id.x].w = origin;
		break;
	default:
		RW_Result4[id.x] = origin;
		break;
	}
}

[numthreads(1024, 1, 1)]
void Origin2To4(uint3 id: SV_DispatchThreadID)
{
	float2 origin = _Origin2[id.x];
	RW_Result4[id.x].xy = origin;
}

[numthreads(1024, 1, 1)]
void Origin3To4(uint3 id: SV_DispatchThreadID)
{
	float3 origin = _Origin3[id.x];
	RW_Result4[id.x].xyz = origin;
}